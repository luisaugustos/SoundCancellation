# -*- coding: utf-8 -*-
"""Copia de 1.0-test-noise-reduction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mvru9btOl0CevhAZVGzQdLt9w7_aTMLs
"""

# Commented out IPython magic to ensure Python compatibility.
# %load_ext autoreload
# %autoreload 2
#%env CUDA_VISIBLE_DEVICES=3

from google.colab import drive
drive.mount('/content/drive')

"""#### Download packages if in Google Colab"""

colab_requirements = [
    "pip install tensorflow-gpu==2.0.0-beta0",
    "pip install librosa",
    "pip install noisereduce",
    "pip install soundfile",

]

import sys, subprocess

def run_subprocess_command(cmd):
    # run the command
    process = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE)
    # print the output
    for line in process.stdout:
        print(line.decode().strip())

IN_COLAB = "google.colab" in sys.modules
if IN_COLAB:
    for i in colab_requirements:
        run_subprocess_command(i)

"""# Test noise reduction algorithm and view steps of algorithm"""

# Commented out IPython magic to ensure Python compatibility.
import IPython
from scipy.io import wavfile
import noisereduce as nr
import soundfile as sf
from noisereduce.generate_noise import band_limited_noise
import matplotlib.pyplot as plt
import urllib.request
import numpy as np
import io
# %matplotlib inline

"""### Load data"""

#url = "https://raw.githubusercontent.com/timsainb/noisereduce/master/assets/cafe_shortR.wav"
#url = "https://github.com/DaveHub5/SoundCancellation/blob/master/droneMainR.wav?raw=true"
url = "https://github.com/DaveHub5/SoundCancellation/blob/master/cafe_shortRR.wav?raw=true"
response = urllib.request.urlopen(url)
data, rate = sf.read(io.BytesIO(response.read()))
data = data

IPython.display.Audio(data=data, rate=rate)

fig, ax = plt.subplots(figsize=(20,3))
ax.plot(data)

"""### add noise"""

noise_len = 2 # seconds
noise = band_limited_noise(min_freq=2000, max_freq = 12000, samples=len(data), samplerate=rate)*10
noise_clip = noise[:rate*noise_len]
audio_clip_band_limited = data+noise

fig, ax = plt.subplots(figsize=(20,3))
ax.plot(audio_clip_band_limited)

IPython.display.Audio(data=audio_clip_band_limited, rate=rate)

url = "https://github.com/DaveHub5/SoundCancellation/blob/master/droneNoiseR.wav?raw=true"
response = urllib.request.urlopen(url)
dataNoise, rate = sf.read(io.BytesIO(response.read()))
dataNoise = dataNoise

IPython.display.Audio(data=dataNoise, rate=rate)

audio_clip_band_limited = data+dataNoise
fig, ax = plt.subplots(figsize=(20,3))
ax.plot(audio_clip_band_limited)

IPython.display.Audio(data=audio_clip_band_limited, rate=rate)

"""### remove noise"""

noise_reduced = nr.reduce_noise(audio_clip=audio_clip_band_limited, noise_clip=dataNoise, prop_decrease=1.0, verbose=True)

"""##### playback recovered audio"""

fig, ax = plt.subplots(figsize=(20,3))
ax.plot(noise_reduced)

IPython.display.Audio(data=noise_reduced, rate=rate)

"""## A more difficult example"""

url = "https://raw.githubusercontent.com/timsainb/noisereduce/master/assets/cafe_short.wav"
response = urllib.request.urlopen(url)
noise_data, noise_rate = sf.read(io.BytesIO(response.read()))

fig, ax = plt.subplots(figsize=(20,4))
ax.plot(noise_data)

IPython.display.Audio(data=noise_data, rate=noise_rate)

max(noise_data)

"""### add noise to data"""

snr = 2 # signal to noise ratio
noise_clip = noise_data/snr
audio_clip_cafe = data + dataNoise

"""### plot noisy data"""

fig, ax = plt.subplots(figsize=(20,4))
ax.plot(audio_clip_cafe)

IPython.display.Audio(data=audio_clip_cafe, rate=noise_rate)

"""### reduce noise"""

noise_reduced = nr.reduce_noise(audio_clip=audio_clip_cafe, noise_clip=noise_clip, verbose=True)

"""##### playback recovered audio"""

fig, ax = plt.subplots(figsize=(20,3))
ax.plot(noise_reduced)

IPython.display.Audio(data=noise_reduced, rate=rate)

"""## Use tensorflow as the backend for noise reduction"""

noise_reduced = nr.reduce_noise(audio_clip=audio_clip_cafe.astype('float32'),
                                noise_clip=noise_clip.astype('float32'),
                                use_tensorflow=True, 
                                verbose=False)

len(noise_reduced), len(audio_clip_cafe)

fig, ax = plt.subplots(figsize=(20,3))
ax.plot(audio_clip_cafe)
ax.plot(noise_reduced, alpha = 0.5)

IPython.display.Audio(data=noise_reduced, rate=rate)

"""### Compare times"""

# Commented out IPython magic to ensure Python compatibility.
# %%timeit
# # non-tensorflow
# noise_reduced = nr.reduce_noise(audio_clip=audio_clip_cafe.astype('float32'),
#                                 noise_clip=noise_clip.astype('float32'),
#                                 use_tensorflow=False, 
#                                 verbose=False)

# Commented out IPython magic to ensure Python compatibility.
# %%timeit
# # Use tensorflow
# noise_reduced = nr.reduce_noise(audio_clip=audio_clip_cafe.astype('float32'),
#                                 noise_clip=noise_clip.astype('float32'),
#                                 use_tensorflow=True, 
#                                 verbose=False)

"""#### compare longer clips"""

# make a longer clip by repeating the same clip a few times
longer_clip = np.concatenate([audio_clip_cafe.astype('float32') for i in range(100)])
print("Clip is {} seconds long.".format(round(len(longer_clip)/rate)))

# Commented out IPython magic to ensure Python compatibility.
# %%time
# # non-tensorflow
# noise_reduced = nr.reduce_noise(audio_clip=longer_clip,
#                                 noise_clip=noise_clip.astype('float32'),
#                                 use_tensorflow=False, 
#                                 verbose=False)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# # use tensorflow
# noise_reduced = nr.reduce_noise(audio_clip=longer_clip,
#                                 noise_clip=noise_clip.astype('float32'),
#                                 use_tensorflow=True, 
#                                 verbose=False)

"""### ensure that noise reduction does not cause distortion when prop_decrease == 0"""

noise_reduced = nr.reduce_noise(audio_clip=data, noise_clip=noise_clip, prop_decrease=0, verbose=False)

fig, ax = plt.subplots(figsize=(20,3))
ax.plot(noise_reduced[3000:5000])
ax.plot(data[3000:5000])